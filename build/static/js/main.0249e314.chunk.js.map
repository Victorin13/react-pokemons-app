{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","services/authentication-service.ts","pages/login.tsx","privateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","arguments","length","undefined","Date","concat","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","_ref","pokemon","borderColor","setColor","useState","history","useHistory","_jsx","className","onClick","goToPokemon","id","push","onMouseEnter","showBorder","onMouseLeave","hideBorder","children","_jsxs","style","src","picture","alt","name","created","types","map","POKEMONS","hp","cp","PokemonService","getPokemons","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","getPokemon","data","isEmpty","find","updatePokemon","method","body","JSON","stringify","headers","index","findIndex","deletePokemon","filter","addPokemon","searchPokemon","term","includes","Object","keys","console","process","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","log","handleInputChange","Link","to","PokemonList","useEffect","position","bottom","right","Loader","PokemonsDetail","match","setPokemon","params","width","margin","PageNotFound","PokemonForm","isEditForm","form","setForm","isValid","hasType","newField","isAddForm","validateForm","newForm","start","end","startsWith","endsWith","errorMsg","test","isTypesValid","onSubmit","preventDefault","handleSubmit","htmlFor","marginBottom","disabled","checked","selectType","currentType","PokemonEdit","Pokemon","constructor","PokemonAdd","getTime","authenticationService","login","username","password","isAuthenticated","setTimeout","Login","message","setMessage","AuthenticationService","PrivateRoute","component","Component","rest","Route","render","props","Redirect","pathname","App","Router","Switch","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0249e314.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => {\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`\n}\n\nexport default formatDate;","const formatType = (type: string): string => {\n    let color: string;\n   \n    switch (type) {\n      case 'Feu': \n        color = 'red lighten-1'; \n        break; \n      case 'Eau': \n        color = 'blue lighten-1'; \n        break; \n      case 'Plante': \n        color = 'green lighten-1'; \n        break; \n      case 'Insecte': \n        color = 'brown lighten-1'; \n        break; \n      case 'Normal': \n        color = 'grey lighten-3'; \n        break; \n      case 'Vol': \n        color = 'blue lighten-3'; \n        break; \n      case 'Poison': \n        color = 'deep-purple accent-1'; \n        break; \n      case 'Fée': \n        color = 'pink lighten-4'; \n        break; \n      case 'Psy': \n        color = 'deep-purple darken-2'; \n        break; \n      case 'Electrik': \n        color = 'lime accent-1'; \n        break; \n      case 'Combat': \n        color = 'deep-orange'; \n        break; \n      default: \n        color = 'grey'; \n        break; \n    }\n   \n    return `chip ${color}`;\n}\n\nexport default formatType;","import React, { FunctionComponent, useState } from 'react';\nimport Pokemon from '../models/pokemon';\nimport './pokemon-card.css';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport { useHistory } from 'react-router-dom';\n  \ntype Props = {\n  pokemon: Pokemon\n  borderColor?: string\n};\n  \nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {\n    \n    const [color, setColor] = useState<string>()\n    const history = useHistory();\n\n    const showBorder = () => {\n        setColor(borderColor)\n    }\n\n    const hideBorder = () => {\n        setColor('#f5f5f5') //couleur par defaut\n    }\n\n    const goToPokemon = (id: number) => {\n        history.push(`/pokemons/${id}`)\n    }\n\n  return (\n    <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder} >\n      <div className=\"card horizontal\" style={{ borderColor: color }}>\n        <div className=\"card-image\"> \n          <img src={pokemon.picture} alt={pokemon.name}/>\n        </div>\n        <div className=\"card-stacked\">\n          <div className=\"card-content\">\n            <p>{pokemon.name}</p>\n            <p><small>{formatDate(pokemon.created)}</small></p>\n            {pokemon.types.map((type) => \n                <span key={type} className={formatType(type)}>{type}</span>\n            )}\n          </div>\n        </div>\n      </div> \n    </div>\n  );\n}\n  \nexport default PokemonCard;","import Pokemon from './pokemon';\n   \nconst POKEMONS: Pokemon[] = [\n    {\n        id: 1,\n        name: \"Bulbizarre\",\n        hp: 25,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\n        types: [\"Plante\", \"Poison\"],\n        created: new Date()\n    },\n    {\n        id: 2,\n        name: \"Salamèche\",\n        hp: 28,\n        cp: 6,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\n        types: [\"Feu\"],\n        created: new Date()\n    },\n    {\n        id: 3,\n        name: \"Carapuce\",\n        hp: 21,\n        cp: 4,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\n        types: [\"Eau\"],\n        created: new Date()\n    },\n    {\n        id: 4,\n        name: \"Aspicot\",\n        hp: 16,\n        cp: 2,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\n        types: [\"Insecte\", \"Poison\"],\n        created: new Date()\n    },\n    {\n        id: 5,\n        name: \"Roucool\",\n        hp: 30,\n        cp: 7,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\n        types: [\"Normal\", \"Vol\"],\n        created: new Date()\n    },\n    {\n        id: 6,\n        name: \"Rattata\",\n        hp: 18,\n        cp: 6,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\n        types: [\"Normal\"],\n        created: new Date()\n    },\n    {\n        id: 7,\n        name: \"Piafabec\",\n        hp: 14,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\n        types: [\"Normal\", \"Vol\"],\n        created: new Date()\n    },\n    {\n        id: 8,\n        name: \"Abo\",\n        hp: 16,\n        cp: 4,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\n        types: [\"Poison\"],\n        created: new Date()\n    },\n    {\n        id: 9,\n        name: \"Pikachu\",\n        hp: 21,\n        cp: 7,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\n        types: [\"Electrik\"],\n        created: new Date()\n    },\n    {\n        id: 10,\n        name: \"Sabelette\",\n        hp: 19,\n        cp: 3,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\n        types: [\"Normal\"],\n        created: new Date()\n    },\n    {\n        id: 11,\n        name: \"Mélofée\",\n        hp: 25,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\n        types: [\"Fée\"],\n        created: new Date()\n    },\n    {\n        id: 12,\n        name: \"Groupix\",\n        hp: 17,\n        cp: 8,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\n        types: [\"Feu\"],\n        created: new Date()\n    }\n];\n  \nexport default POKEMONS;","/* Version de PRODUCTION */\nimport Pokemon from \"../models/pokemon\";\nimport POKEMONS from \"../models/mock-pokemon\";\n  \nexport default class PokemonService {\n  \n  static pokemons:Pokemon[] = POKEMONS;\n  \n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\n  \n  static getPokemons(): Promise<Pokemon[]> {\n    if(this.isDev) {\n      return fetch('http://localhost:3001/pokemons')\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => {\n      resolve(this.pokemons);\n    });\n  }\n  \n  static getPokemon(id: number): Promise<Pokemon|null> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${id}`)\n      .then(response => response.json())\n      .then(data => this.isEmpty(data) ? null : data)\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => {    \n      resolve(this.pokemons.find(pokemon => pokemon.id === id));\n    }); \n  }\n  \n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(pokemon),\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => {\n      const { id } = pokemon;\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\n      this.pokemons[index] = pokemon;\n      resolve(pokemon);\n    }); \n  }\n  \n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => {    \n      const { id } = pokemon;\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\n      resolve({});\n    }); \n  }\n  \n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n    pokemon.created = new Date(pokemon.created);\n  \n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons`, {\n        method: 'POST',\n        body: JSON.stringify(pokemon),\n        headers: { 'Content-Type': 'application/json'}\n      })\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => {    \n      this.pokemons.push(pokemon);\n      resolve(pokemon);\n    }); \n  }\n  \n  static searchPokemon(term: string): Promise<Pokemon[]> {\n    if(this.isDev) {\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\n      .then(response => response.json())\n      .catch(error => this.handleError(error));\n    }\n  \n    return new Promise(resolve => {    \n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\n      resolve(results);\n    });\n  \n  }\n  \n  static isEmpty(data: Object): boolean {\n    return Object.keys(data).length === 0;\n  }\n  \n  static handleError(error: Error): void {\n    console.error(error);\n  }\n}","import React, { FunctionComponent, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/pokemon-service';\n \nconst PokemonSearch: FunctionComponent = () => {\n  \n  const [term, setTerm] = useState<string>('');\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n \n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const term = e.target.value;\n    setTerm(term);\n    \n    if(term.length <= 1) {\n        setPokemons([]);\n        return;\n    }\n \n    PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\n    console.log(pokemons);\n  }\n  \n  return (\n    <div className=\"row\"> \n    <div className=\"col s12 m6 offset-m3\"> \n      <div className=\"card\"> \n      <div className=\"card-content\"> \n        <div className=\"input-field\"> \n        <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} /> \n        </div> \n        <div className='collection'>\n        {pokemons.map((pokemon) => (\n          <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\n            {pokemon.name}\n          </Link>\n        ))}\n        </div> \n      </div> \n      </div> \n    </div> \n    </div>\n  );\n}\n  \nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Pokemon from '../models/pokemon';\nimport PokemonCard from '../components/pokemon-card';\nimport PokemonService from '../services/pokemon-service';\nimport { Link } from 'react-router-dom';\nimport PokemonSearch from '../components/pokemon-search';\n  \nconst PokemonList: FunctionComponent = () => {\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  \n  useEffect(() => {\n    PokemonService.getPokemons().then((pokemons) => setPokemons(pokemons));\n  }, []);\n  \n  return (\n    <div>\n      <h1 className=\"center\">Pokédex</h1>\n      <div className=\"container\"> \n        <div className=\"row\">\n          <PokemonSearch />\n          {pokemons.map(pokemon => (\n            <PokemonCard key={pokemon.id} pokemon={pokemon} />\n          ))}\n        </div>\n        <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\n        style={{position: 'fixed', bottom: '25px', right: '25px'}}\n        to=\"/pokemon/add\">\n          <i className=\"fa fa-plus-circle\"></i>\n        </Link>\n      </div>\n    </div> \n  );\n}\n  \nexport default PokemonList;","import React, { FunctionComponent } from 'react';\n  \nconst Loader: FunctionComponent = () => {\n   \n  return (\n    <div className=\"preloader-wrapper big active\"> \n      <div className=\"spinner-layer spinner-blue\"> \n        <div className=\"circle-clipper left\"> \n          <div className=\"circle\"></div> \n        </div>\n        <div className=\"gap-patch\"> \n          <div className=\"circle\"></div> \n        </div><div className=\"circle-clipper right\"> \n          <div className=\"circle\"></div> \n        </div>\n      </div> \n   </div> \n  );\n}\n   \nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\nimport Loader from '../components/loader';\n  \ntype Params = { id: string };\n  \nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    PokemonService.getPokemon(+match.params.id)\n    .then((pokemon) =>  setPokemon(pokemon));\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n          <div className=\"col s12 m8 offset-m2\"> \n            <h2 className=\"header center\">{ pokemon.name }</h2>\n            <div className=\"card hoverable\"> \n              <div className=\"card-image\">\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                <Link to={`/pokemons/edit/${pokemon.id}`} className='btn btn-floating halfway-fab waves-effect waves-light'>\n                    <i className=\"fa-solid fa-pencil\"></i>\n                </Link>\n              </div>\n              <div className=\"card-stacked\">\n                <div className=\"card-content\">\n                  <table className=\"bordered striped\">\n                    <tbody>\n                      <tr> \n                        <td>Nom</td> \n                        <td><strong>{ pokemon.name }</strong></td> \n                      </tr>\n                      <tr> \n                        <td>Points de vie</td> \n                        <td><strong>{ pokemon.hp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Dégâts</td> \n                        <td><strong>{ pokemon.cp }</strong></td> \n                      </tr> \n                      <tr> \n                        <td>Types</td> \n                        <td>\n                          {pokemon.types.map(type => (\n                           <span key={type} className={formatType(type)}>{type}</span>\n                          ))}</td> \n                      </tr> \n                      <tr> \n                        <td>Date de création</td> \n                        <td>{formatDate(pokemon.created)}</td> \n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n                <div className=\"card-action\">\n                  <Link to=\"/\">Retour</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n  \nconst PageNotFound: FunctionComponent = () => {\n  \n  return (\n    <div className=\"center\">\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\n      <h1>Hey, cette page n'existe pas !</h1> \n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\n        Retourner à l'accueil\n      </Link>\n    </div>\n  );\n}\n  \nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\n  \ntype Props = {\n  pokemon: Pokemon,\n  isEditForm: boolean\n};\n\ntype Field = {\n    value?:any,\n    error?: string,\n    isValid?: boolean\n};\n\ntype Form = {\n    picture: Field,\n    name: Field,\n    hp: Field,\n    cp: Field,\n    types: Field\n}\n  \nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\n    const [form, setForm] = useState<Form>({\n        picture: {value: pokemon.picture},\n        name: {value: pokemon.name, isValid: true},\n        hp: {value: pokemon.hp, isValid: true},\n        cp: {value: pokemon.cp, isValid: true},\n        types: {value: pokemon.types, isValid: true}\n    })\n\n    const history = useHistory();\n\n    const types: string[] = [\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n    ];\n\n    const hasType = (type: string): boolean => {\n        return form.types.value.includes(type);\n    }\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const fieldName: string = e.target.name;\n        const fieldValue: string = e.target.value;\n        const newField: Field = {[fieldName]: {value: fieldValue}};\n\n        setForm({...form, ...newField});\n    }\n\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n        const checked = e.target.checked;\n        let newField: Field;\n    \n        if(checked) {\n          // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n          const newTypes: string[] = form.types.value.concat([type]);\n          newField = { value: newTypes };\n        } else {\n          // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n          const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n          newField = { value: newTypes };\n        }\n    \n        setForm({...form, ...{ types: newField }});\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      const isFormValide = validateForm();\n\n      if(isFormValide) {\n        pokemon.picture = form.picture.value;\n        pokemon.name = form.name.value;\n        pokemon.hp = form.hp.value;\n        pokemon.cp = form.cp.value;\n        pokemon.types = form.types.value;\n\n        isEditForm ? updatePokemon() : addPokemon();\n      }\n    }\n\n    const addPokemon = () => {\n      PokemonService.addPokemon(pokemon).then(() => history.push('/pokemons'));\n    }\n\n    const updatePokemon = () => {\n      PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n    }\n\n    const isAddForm = () => {\n      return !isEditForm;\n    }\n\n    const validateForm = () => {\n      let newForm: Form = form;\n\n      // Validator url\n      if(isAddForm()) {\n\n        const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n        const end = \".png\";\n\n        if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\n          const errorMsg: string = 'L\\'url n\\'est pas valide.';\n          const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\n          newForm = { ...newForm, ...{ picture: newField } };\n        } else {\n          const newField: Field = { value: form.picture.value, error: '', isValid: true };\n          newForm = { ...newForm, ...{ picture: newField } };\n        }\n      }\n  \n      // Validator name\n      if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n        const errorMsg: string = 'Le nom du pokémon est requis (3-25).';\n        const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n        newForm = { ...newForm, ...{ name: newField } };\n      } else {\n        const newField: Field = { value: form.name.value, error: '', isValid: true };\n        newForm = { ...newForm, ...{ name: newField } };\n      }\n  \n      // Validator hp\n      if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n        const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n        const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n        newForm = { ...newForm, ...{ hp: newField } };\n      } else {\n        const newField: Field = { value: form.hp.value, error: '', isValid: true };\n        newForm = { ...newForm, ...{ hp: newField } };\n      }\n  \n      // Validator cp\n      if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n        const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n        const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n        newForm = { ...newForm, ...{ cp: newField } };\n      } else {\n        const newField: Field = { value: form.cp.value, error: '', isValid: true };\n        newForm = { ...newForm, ...{ cp: newField } };\n      }\n  \n      setForm(newForm);\n      return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n    }\n  \n    const isTypesValid = (type: string): boolean => {\n      // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n      // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n      if (form.types.value.length === 1 && hasType(type)) {\n        return false;\n      }\n      \n      // Cas n°1: Le pokémon a au moins 3 types.\n      // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n      if (form.types.value.length >= 3 && !hasType(type)) { \n        return false; \n      } \n      \n      // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n      // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n      return true;\n    }\n  \n  const deletePokemon = () => {\n    PokemonService.deletePokemon(pokemon).then(() => history.push('/pokemons'));\n  }\n   \n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\">\n            {isEditForm && \n              <div className=\"card-image\">\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                <span className=\"btn-floating halfway-fab waves-effect waves-light\">\n                  <i onClick={deletePokemon} className=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                </span>\n              </div>\n            }\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n\n                {/* Pokemon picture */}\n                {isAddForm() && \n                  <div className=\"form-group\">\n                    <label htmlFor=\"name\">Image</label>\n                    <input id=\"picture\" type=\"text\" name='picture' className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\n                    {/* error */}\n                    {form.name.error &&\n                    <div className=\"card-panel red accent-1\">\n                      {form.picture.error}\n                    </div>\n                    }\n                  </div>\n                }\n\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" type=\"text\" name='name' className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.name.error &&\n                  <div className=\"card-panel red accent-1\">\n                    {form.name.error}\n                  </div>\n                  }\n                </div>\n\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" type=\"number\" name='hp' className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.hp.error &&\n                  <div className=\"card-panel red accent-1\">\n                    {form.hp.error}\n                  </div>\n                  }\n                </div>\n\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" type=\"number\" name='cp' className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.cp.error &&\n                  <div className=\"card-panel red accent-1\">\n                    {form.cp.error}\n                  </div>\n                  }\n                </div>\n\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{marginBottom: '10px'}}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{ type }</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n   \nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/pokemon-service';\nimport Loader from '../components/loader';\n \ntype Params = { id: string };\n  \nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n  useEffect(() => {\n    PokemonService.getPokemon(+match.params.id)\n    .then((pokemon) =>  setPokemon(pokemon));\n  }, [match.params.id]);\n    \n  return (\n    <div>\n      { pokemon ? (\n        <div className=\"row\">\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\n            <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\n        </div>\n      ) : (\n        <h4 className=\"center\"><Loader /></h4>\n      )}\n    </div>\n  );\n}\n  \nexport default PokemonEdit;","export default class Pokemon {\n    // 1. Typage des propiétés d'un pokémon.\n    id: number;\n    hp: number;\n    cp: number;\n    name: string;\n    picture: string;\n    types: Array<string>;\n    created?: Date;\n     \n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\n    constructor(\n     id: number,\n     hp: number = 100,\n     cp: number = 10,\n     name: string = '...',\n     picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\n     types: Array<string> = ['Normal'],\n     created: Date = new Date()\n    ) {\n     // 3. Initialisation des propiétés d'un pokémons.\n     this.id = id;\n     this.hp = hp;\n     this.cp = cp;\n     this.name = name;\n     this.picture = picture;\n     this.types = types;\n     this.created = created;\n    }\n}","import React, { FunctionComponent, useState } from \"react\";\nimport Pokemon from \"../models/pokemon\";\nimport PokemonForm from \"../components/pokemon-form\";\n\nconst PokemonAdd: FunctionComponent = () => {\n    const [id] = useState<number>(new Date().getTime());\n    const [pokemon] = useState<Pokemon>(new Pokemon(id));\n     \n    return (\n      <div className=\"row\">\n        <h2 className=\"header center\">Ajouter un pokémon</h2>\n        <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\n      </div>\n    );\n}\n\nexport default PokemonAdd;","export default class authenticationService {\n    static isAuthenticated: boolean = false;\n\n    static login (username: string, password: string): Promise<boolean> {\n        const isAuthenticated = (username === 'Vivo' && password === 'pokevivo');\n\n        return new Promise (resolve => {\n            setTimeout(() => {\n                this.isAuthenticated = isAuthenticated;\n                resolve(isAuthenticated)\n            }, 1000);\n        });\n    }\n}","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthenticationService from '../services/authentication-service';\n\ntype Field = {\n  value?: any,\n  error?: string,\n  isValid?: boolean\n};\n\ntype Form = {\n  username: Field,\n  password: Field\n}\n\nconst Login: FunctionComponent = () => {\n\n  const history = useHistory();\n\n  const [form, setForm] = useState<Form>({\n    username: { value: '' },\n    password: { value: '' },\n  });\n\n  const [message, setMessage] = useState<string>('Vous êtes déconnecté. (Vivo)');\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const fieldName: string = e.target.name;\n    const fieldValue: string = e.target.value;\n    const newField: Field = { [fieldName]: { value: fieldValue } };\n\n    setForm({ ...form, ...newField});\n  }\n\n  const validateForm = () => {\n    let newForm: Form = form;\n\n    // Validator username\n    if(form.username.value.length < 3) {\n      const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\n      const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ username: newField } };\n    } else {\n      const newField: Field = { value: form.username.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ username: newField } };\n    }\n\n    // Validator password\n    if(form.password.value.length < 6) {\n      const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\n      const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ password: newField } };\n    } else {\n      const newField: Field = { value: form.password.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ password: newField } };\n    }\n\n    setForm(newForm);\n\n    return newForm.username.isValid && newForm.password.isValid;\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n    if(isFormValid) {\n      setMessage('👉 Tentative de connexion en cours ...');\n      AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\n        if(!isAuthenticated) {\n          setMessage('🔐 Identifiant ou mot de passe incorrect.');\n          return;\n        }\n        \n        history.push('/pokemons');\n        \n      });\n    }\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\">\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Form message */}\n                {message && <div className=\"form-group\">\n                  <div className=\"card-panel grey lighten-5\">\n                    {message}\n                  </div>\n                </div>}\n                {/* Field username */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Identifiant</label>\n                  <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.username.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.username.error} \n                  </div>} \n                </div>\n                {/* Field password */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Mot de passe</label>\n                  <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\n                  {/* error */}\n                  {form.password.error &&\n                  <div className=\"card-panel red accent-1\"> \n                   {form.password.error} \n                  </div>} \n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n \nexport default Login;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthenticationService from './services/authentication-service';\n  \nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\n  <Route {...rest} render={(props) => {\n    const isAuthenticated = AuthenticationService.isAuthenticated;\n    if (!isAuthenticated) {    \n      return <Redirect to={{ pathname: '/login' }} />\n    }\n  \n    return <Component {...props} />\n  }} />\n);\n  \nexport default PrivateRoute;","import React, { FunctionComponent } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport PokemonList from './pages/pokemon-list';\nimport PokemonsDetail from './pages/pokemon-detail';\nimport PageNotFound from './pages/page-not-found';\nimport PokemonEdit from './pages/pokemon-edit';\nimport PokemonAdd from './pages/pokemon-add';\nimport Login from './pages/login';\nimport PrivateRoute from './privateRoute';\n  \nconst App: FunctionComponent = () => {\n\n    return (\n        <Router>\n            <div>\n                {/* La barre de navigation commune à toutes les pages */}\n                <nav>\n                    <div className='nav-wrapper teal'>\n                        <Link to='/' className='brand-logo center'>Pokedex</Link>\n                    </div>\n                </nav>\n                {/* Le système de gestion des routes de notre application */}\n                <Switch>\n                    <PrivateRoute exact path='/' component={PokemonList} />\n                    <Route exact path='/login' component={Login} />\n                    <PrivateRoute exact path='/pokemons' component={PokemonList} />\n                    <PrivateRoute exact path='/pokemon/add' component={PokemonAdd} />\n                    <PrivateRoute exact path='/pokemons/edit/:id' component={PokemonEdit} />\n                    <PrivateRoute path='/pokemons/:id' component={PokemonsDetail} />\n                    <Route component={PageNotFound} />\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n  \nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}